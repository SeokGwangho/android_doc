官方原文：
https://developer.android.com/guide/components/activities?hl=zh-cn
   ↑↑
Activity:

Activity 是一个应用组件，用户可与Activity提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等等等等操作。

每个 Activity 都会获得一个用于绘制其用户界面的窗口---窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上。

一个应用，通常由多个彼此松散联系的 Activity 组成。


一般会指定应用中的某个 Activity 为“主”Activity，即首次启动应用时，呈现给用户的那个 Activity。
而且每个 Activity 均可启动另一个 Activity，以便执行不同的操作。


每次新 Activity 启动时，前一 Activity 便会停止，但系统会在堆栈（“返回栈”）中保留该 Activity。
当新 Activity 启动时，系统【也】会将其推送到返回栈上（相当于栈顶），并取得用户焦点。 
返回栈遵循基本的“后进先出”堆栈机制(stack)，
因此，当用户完成当前 Activity 并按“返回”按钮时，系统会从堆栈中将其弹出（并销毁），然后恢复前一 Activity。
（任务和返回栈 文档中,对返回栈有更详细的阐述。）


当一个 Activity 因某个新 Activity 启动而停止时，系统会通过该 Activity 的生命周期回调方法,通知其这一状态变化。
Activity 因状态变化
    —系统是 创建 Activity、
           停止 Activity、
           恢复 Activity 还是
           销毁 Activity
    — 
而收到的回调方法可能有若干种，每一种回调,都会为您提供执行与该状态变化相应的特定操作的机会。 
    
例如，
停止时，您的 Activity 应释放任何大型对象，例如网络或数据库连接。 
当 Activity 恢复时，您可以重新获取所需资源，并恢复执行中断的操作。 
这些状态转变都是 Activity 生命周期的一部分。




本文的其余部分,阐述有关
如何创建和使用 Activity 的基础知识（包括对 Activity 生命周期工作方式的全面阐述），以便您正确管理各种 Activity 状态之间的转变。


------------------------------------------------------
创建 Activity:
------------------------------------------------------
要创建 Activity，您必须创建 Activity 的子类（或使用其现有子类）。
您需要在子类中实现 Activity 在其生命周期的各种状态之间转变时
（例如创建 Activity、停止 Activity、恢复 Activity 或销毁 Activity 时）系统调用的回调方法。 

2个最重要的回调方法是：

onCreate():
    您必须实现此方法。
    系统会在创建您的 Activity 时调用此方法。
    您应该在实现内初始化 Activity 的必需组件。 最重要的是，您必须在此方法内调用 setContentView()，以定义 Activity 用户界面的布局。

onPause():
    系统将此方法作为用户离开 Activity 的第一个信号（但并不总是意味着 Activity 会被销毁）进行调用。 
    您通常应该在此方法内确认在当前用户会话结束后仍然有效的任何更改（因为用户可能不会返回）。 

您还应使用几种
其他生命周期回调方法，以便提供流畅的 Activity 间用户体验，
以及处理
导致您的 Activity 停止甚至被销毁的意外中断。 

后文的管理 Activity 生命周期部分,对所有生命周期回调方法进行了阐述。

------------------------------------------------------
实现用户界面：
------------------------------------------------------
Activity 的用户界面, 是由层级式视图提供的。(视图： 衍生自 View 类的对象)
每个视图(view),都控制 Activity 窗口内的特定矩形空间，可对用户交互作出响应。


例如，视图可以是在用户触摸时，启动某项操作的按钮。 
您可以利用 Android 提供的【许多现成视图】，来设计和组织您的布局(Layout)。

“小部件”是提供按钮、文本字段、复选框或仅仅是一幅图像等屏幕视觉（交互式）元素的视图。 
“布局(Layout)”是衍生自 ViewGroup 的视图，为其子视图提供唯一布局模型，例如线性布局、网格布局或相对布局。 
您还可以为 View 类和 ViewGroup 类创建子类（或使用其现有子类）, 来自行创建小部件和布局，然后将它们应用于您的 Activity 布局。


利用视图, 定义布局的 最常见方法是: 
    借助保存在您的应用资源(res文件夹)内的 XML 布局文件。
    
    这样一来，您就可以将[用户界面的设计] 与 [定义 Activity 行为的源代码] 分开维护。 
问：
xml文件怎么就能进行布局了？

您可以通过 setContentView() 将布局设置为 Activity 的 UI，从而传递布局的资源 ID。
不过，您也可以在 Activity 代码中创建新 View，并通过将新 View 插入 ViewGroup 来创建视图层次，然后通过将根 ViewGroup 传递到 setContentView() 来使用该布局。

如需了解有关创建用户界面的信息，请参阅用户界面文档。

------------------------------------------------------
在清单文件中声明 Activity：
------------------------------------------------------
…
详细见上面网页。
