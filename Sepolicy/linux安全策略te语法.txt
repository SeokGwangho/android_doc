##################################################################################
1.Linux系统安全策略.te语法

2.android中SELINUX规则分析和语法简介.txt
##################################################################################
一. 基本语法

很多.te文件集中在 /external/sepolicy 文件夹下，
各个Vendor也有很多自定义的，在/device/xxxx/common/sepolicy 里。


.te的最基本样子是：
         (domain name)
    allow factory	  powerctl_prop: 	property_service set;
    allow factory	  ttyGS_device: 	chr_file { read write open ioctl};
    allow factory	  ttyMT_device: 	chr_file { read write open ioctl};
    allow factory	  irtx_device: 		chr_file { read write ioctl open };
    allow factory	  devpts: 		chr_file { read write getattr ioctl };

----------------------------------------------------------------------------------
相似的te语句的,会被归类在同一个te文件下面, 如上面的语句是作用于factory，则会在factory.te文件里。
----------------------------------------------------------------------------------
/external/sepolicy/ 集中了很多系统定义的te文件，如：
 
  文件名 	                 归类
mac_permissions.xml   		App进程
seapp_contexts 	      		App数据文件
file_contexts 	      		系统文件
property_contexts 	  	系统属性


----------------------------------------------------------------------------------
.te文件，最基本的语法为：                  (domain)
				rule_name source_type target_type : class perm_set
----------------------------------------------------------------------------------
意思：
rule_name   ：规则名称，有
		allow, dontaudit, auditallow, neverallow.

source_type ：源类型，对应一个很重要的概念--------域（domain）

tartget_type：目标的类型，即安全上下文，SELinux的一个重要的判断对象

class       ：类别，目标（客体）是哪种类别，主要有File,Dir,Socket,SEAndroid还有Binder等，
                在这些基础上又细分出设备字符类型（chr_file），链接文件（lnk_file）等。
                可以通过ls -l查看文件类型

perm_set    ：动作集

----------------------------------------------------------------------------------
实例分析一下:
----------------------------------------------------------------------------------
    allow factory ttyMT_device:chr_file { read write open ioctli };

意思是：
允许 "factory" domain里的进程或服务, 对类型为ttyMT_device的, 类别为文件(file), 执行{ }里的那些权限.



--------------------------------------------------------------------------------------------------------
从上到下按顺序介绍一下规则名称：
--------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------
rule_name：
----------------------------------------------------------------------------------
allow：      允许某个进程执行某个动作
auditallow：audit含义就是记录某项操作。
            默认SELinux只记录那些权限检查失败的操作。
            auditallow则使得权限检查成功的操作也被记录。
            注意，allowaudit只是允许记录，它和赋予权限没关系。赋予权限必须且只能使用allow语句。
dontaudit：  对那些权限检查失败的操作不做记录。
neverallow： 没有被allow到的动作默认就不允许执行的。
             neverallow只是显式地写出某个动作不被允许，如果添加了该动作的allow，则会编译错误
             
----------------------------------------------------------------------------------
source_type：
----------------------------------------------------------------------------------
            指定一个“域”（domain），一般用于描述进程，该域内的的进程，受该条TE语句的限制。
            
            用type关键字，把一个自定义的域与原有的域相关联!!!
            
            最简单地定义一个新域的方式为：
                type shell, domain      //这句话的意思是，赋予shell给domain属性，同时，shell与属于domain这个集合里。
                                        //如果有一个allow domain xxxxx 的语句，同样地也给了shell xxxxx的属性。

----------------------------------------------------------------------------------
target_type：
----------------------------------------------------------------------------------
指定进程需要操作的客体（文件，文件夹等）类型（安全上下文），同样是用type与一些已有的类型，属性相关联。

以上面的ttyMT_device为例：

type ttyMT_device, dev_type;    //定义一个类型，属于dev_type属性
attribute dev_type;             //属性dev_type在external/sepolicy。

attribute     关键字： 定义一个属性；
type          关键字： 定义一个类型，并可以与一个或多个属性相关联上，如：  type usb_device, dev_type, mlstrustedobject;
typeattribute 关键字： 
    type有两个作用，定义（声明）+ 并关联某个属性。
    
    可以把这两个作用分开： 由type定义，由typeattribute进行关联：
    //例： 
    //定义httpd_user_content_t，并关联两个属性： 
    type httpd_user_content_t, file_type, httpdcontent;  
    
    分成两条语句进行表述：
    type httpd_user_content_t;  //定义httpd_user_content_t
    typeattribute httpd_user_content_t file_type, httpdcontent;  //关联属性   

------------------------------------------------------------------
这些类型（安全上下文）【target_type】会显示地与一个“文件”想关联，如：
------------------------------------------------------------------
file_contexts里面，显式地定义了哪些文件属于ttyMT_device类型，即用ls -Z显示出来的文件的安全上下文：

    /dev/ttyMT.* u:object_r:ttyMT_device:s0

------------------------------------------------------------------
虚拟文件系统的标识方式，与普通的文件系统文件标识方式，不一样，用genfscon来配置：
------------------------------------------------------------------
    genfscon的语法是： genfscon fs_type pathprefix [-file_type] context

    把/proc/mtk_demo/demo_file文件的安全上下文，设置成demo_context：
    genfscon proc /mtk_demo/demo_file u:object_r:demo_context:s0

------------------------------------------------------------------
网络对象上下文：
------------------------------------------------------------------
    例1：定义端口的上下文
    portcon tcp 80 system_u:object_r:http_port_t
    portcon tcp 8080 system_u:object_r:http_port_t
    
    例2：定义网络接口的上下文：
    netifcon eth0 system_u:object_r:netif_eth0_t system_u:object_r:netmsg_eth0_t
    
    例3：定义节点的上下文
    nodecon 10.33.10.66 255.255.255.255 system_u:object_r:node_zeus_t;
    nodecon 10.33.10.0 255.255.255.0 system_u:object_r:node_any_t






-----------------------------------------------------------------------------------
问： 那么，这么多属性，有什么作用？ 怎么用？
-----------------------------------------------------------------------------------
答： 
	这些属性，会有一个地方，显式地说明这些每个属性,拥有什么权限. 
	在 external/sepolicy/domain.te 里! ------------------[总策略原则File].



如，编译报错：
	.... neverallow on line xxx ofexternal/sepolicy/domain.te ……

原因：
	新添加的sepolicy项目违反了domain.te 中规定的的[总策略原则]。




另个, 在 external/sepolicy/attributes 里[定义]了[很多属性]：

	# All types used for devices.
	attribute dev_type;

	# All types used for processes.
	attribute domain;

	# All types used for filesystems.
	attribute fs_type;

	# All types used for files that can exist on a labeled fs. Do not use for pseudo file types.
	attribute file_type;

	# All types used for domain entry points.
	attribute exec_type;

	# All types used for property service
	attribute property_type;

	# All service_manager types created by system_server
	attribute system_server_service;

	# All domains that can override MLS restrictions.
	# i.e. processes that can read up and write down.
	attribute mlstrustedsubject;

	# All types that can override MLS restrictions.
	# i.e. files that can be read by lower and written by higher
	attribute mlstrustedobject;

	# All domains used for apps.
	attribute appdomain;

	# All domains used for apps with network access.
	attribute netdomain;

	# All domains used for binder service domains.
	attribute binderservicedomain;

----------------------------------------------------------------------------------
class：
----------------------------------------------------------------------------------
客体的具体类别。用class来定义一个客体类别，具体定义方式 如下

    [external/sepolicy/security_classes示例]
    # file-related classes
    class filesystem
    class  file      #代表普通文件
    class  dir       #代表目录
    class  fd        #代表文件描述符
    class  lnk_file  #代表链接文件
    class  chr_file  #代表字符设备文件
     ......
     
    # network-related classes
    class socket   #socket
    class tcp_socket
    class udp_socket
    ......
    class binder   #Android平台特有的binder
    class zygote   #Android平台特有的zygote

----------------------------------------------------------------------------------
perm_set：
----------------------------------------------------------------------------------
具体的操作，系统的定义在external/sepolicy/access_vectors。有两种定义方法。
用common命令定义：

    格式为：common common_name { permission_name ... } 
    common定义的perm set能被另外一种perm set命令class所继承
    如：
    common file {
          ioctl read write create getattr setattr lock relabelfrom relabelto
          append unlink link rename execute swapon quotaon mounton 

用class命令定义：
    class class_name [ inherits common_name ] { permission_name ... }
    inherits表示继承了某个common定义的权限  
    注意，class命令它不能被其他class继承
    继承一个common，如继承了file common
    class dir
    inherits file
    {
            add_name
            remove_name
            reparent
            search
            rmdir
            open
            audit_access
            execmod
    }
    不继承任何common，如
    class binder
    {
            impersonate
            call
            set_context_mgr
            transfer
    }


一些特殊的配置文件：
    a. external/sepolicy/attributes 	-> 所有定义的attributeS,都在这个文件
    b. external/sepolicy/access_vectors -> 对应了每一个class可以被允许执行的命令
    c. external/sepolicy/roles 		-> Android中只定义了一个role，名字就是r，将r和attribute domain关联起来
    d. external/sepolicy/users 		-> 其实是将user与roles进行了关联，设置了user的安全级别，s0为最低级是默认的级别，mls_systemHigh是最高的级别
    e. external/sepolicy/security_classes -> 指的是上文命令中的class，个人认为这个class的内容是指在android运行过程中，程序或者系统可能用到的操作的模块
    f. external/sepolicy/te_macros 	  -> 系统定义的宏全在te_macros文件
    g. external/sepolicy/***.te 	  -> 一些配置的文件，包含了各种运行的规则


----------------------------------------------------------------------------------
二. TE的正则表达式和集合
----------------------------------------------------------------------------------
TE文件支持正则表达式，从下面可以看到，通配符是常用的通配符：

    /sys/devices/system/cpu(/.*)?    u:object_r:sysfs_devices_system_cpu:s0
    /sys/power/wake_lock -- u:object_r:sysfs_wake_lock:s0
    /sys/power/wake_unlock -- u:object_r:sysfs_wake_lock:s0
    /sys/kernel/uevent_helper --    u:object_r:usermodehelper:s0
    /sys/module/lowmemorykiller(/.*)? -- u:object_r:sysfs_lowmemorykiller:s0
    
    # asec containers
    /mnt/asec(/.*)?             u:object_r:asec_apk_file:s0
    /mnt/asec/[^/]+/[^/]+\.zip  u:object_r:asec_public_file:s0

需要注意的是上面的"--"，它表示二进制文件，类似的还有：
    #‘-b’ - Block Device ‘-c’ - Character Device
    #‘-d’ - Directory ‘-p’ - Named Pipe
    #‘-l’ - Symbolic Link ‘-s’ - Socket
    #‘--’ - Ordinary file


TE表达式里可以用“{}”来表示一个集合，如：
    allow user_t bin_t : { file dir } { read getattr }; //允许user_t对bin_t类型的文件和文件夹执行read,getattr操作
    allow domain { exec_type sbin_t } : file execute;   //允许domain对exec_type,sbin_t类型的文件执行execute的动作

可以在集合里使用“*”，“-” 和 “~” 三个通配符：
    allow user_t bin_t : { file dir } *;                 //允许user_t对bin_t类型的文件和文件夹执行所有操作
    allow user_t bin_t : { file dir } ~{ read getattr }; //允许user_t对bin_t类型的文件和文件夹执行除了read,getattr以外的所有操作
    allow domain { exec_type -sbin_t } : file execute;   //允许domain对exec_type类型的文件执行execute的动作，除了sbin_t以外



----------------------------------------------------------------------------------
三. TE的类型转换规则
----------------------------------------------------------------------------------
为什么要转换类型?

init进程拥有系统的最高权限，如果由Init进程fork，execu出来的进程，默认是与init相同的权限，这肯定是不安全的。
另，由init生成的文件，默认也是init的读写权限，不方便其他低权限的文件进行访问。

类型转换有两种类型转换：
1. 主体的Domain的转换
2. 客体的转换

Domain的转换:
	type_transition的完整格式为：

    type_transition source_type target_type : class default_type;
    举个例子
    type_transition init_t apache_exec_t : process apache_t;

type_transition init_t apache_exec_t : process apache_t;
 init_t 进程执行type为apache_exec_t的可执行文件时，新的进程转换到apache_t域
但是上面只是告诉了转换的过程，却没有说明，有转换的权限，如果要上面的转换成功，还需要下面的语句：

    #首先，你得让init_t域中的进程能够执行type为apache_exec_t的文件
    allow init_t apache_exec_t : file execute;
    #然后，你还得告诉SELiux，允许init_t做DT切换以进入apache_t域
    allow init_t apache_t : process transition;
    #最后，你还得告诉SELinux，切换入口（对应为entrypoint权限）为执行pache_exec_t类型的文件
    allow apache_t apache_exec_t : file entrypoint;


客体的转换:

	例子：
	type_transition passwd_t tmp_t : file passwd_tmp_t;  

passwd_t在tmp_t目录下创建文件时，该文件的类型转化为passwd_tmp_t。这里默认隐含了一个tmp_t类型dir，因为file的容器只能是个dir。
同样的，如果要上面的语句运行成功，与需要有相应的权限说明：

    对应的必须有两个前提条件:
    * The source domain needs permission to add file entries into the directory
    这个process 必须有在这个目录下添加文件的权限.
     
    * The source domain needs permission to create file entries
    这个process 必须有在这个目录下创建以这个Security Context 为Label 的文件权限.

如果每个转换之前都需要这样繁锁地权限声音实在很麻烦。TE里允许把这些相同的，重复使用的语句定义成一个宏，类似于函数一样。



----------------------------------------------------------------------------------
四. TE的宏
----------------------------------------------------------------------------------
如果把上面domain转换的例子定义成一个宏，应该定义如下：

    #定义domain_auto_trans宏，$1,$2等等代表宏的第一个，第二个....参数
    define(`domain_auto_trans', `
    	# 先allow相关权限,domain_trans宏定义在后面
    	domain_trans($1,$2,$3)
    	# 然后设置type_transition
    	type_transition $1 $2:process $3;
    ')
    #定义domain_trans宏。
    define(`domain_trans', `
    	# SEAndroid在上述三个最小权限上，还添加了自己的一些权限
    	allow $1 $2:file { getattr open read execute };
    	allow $1 $3:process transition;
    	allow $3 $2:file { entrypoint read execute };
    	allow $3 $1:process sigchld;
    	dontaudit $1 $3:process noatsecure;
    	allow $1 $3:process { siginh rlimitinh };
    ')

上面的宏定义在external/sepolicy/te_macros里。客体的转换定义如下：

    #####################################
    # file_type_auto_trans(domain, dir_type, file_type)
    # Automatically label new files with file_type when
    # they are created by domain in directories labeled dir_type.
    #
    define(`file_type_auto_trans', `
    # Allow the necessary permissions.
    file_type_trans($1, $2, $3)
    # Make the transition occur by default.
    type_transition $1 $2:dir $3;
    type_transition $1 $2:notdevfile_class_set $3;
    ')
    define(`file_type_trans', `
    # Allow the domain to add entries to the directory.
    allow $1 $2:dir ra_dir_perms;
    # Allow the domain to create the file.
    allow $1 $3:notdevfile_class_set create_file_perms;
    allow $1 $3:dir create_dir_perms;
    ')


TE的集合也可以定义成一个宏代替，如读写文件操作集的宏：
    define(`x_file_perms', `{ getattr execute execute_no_trans }')
    define(`r_file_perms', `{ getattr open read ioctl lock }')
    define(`w_file_perms', `{ open append write }')
    define(`rx_file_perms', `{ r_file_perms x_file_perms }')
    define(`ra_file_perms', `{ r_file_perms append }')
    define(`rw_file_perms', `{ r_file_perms w_file_perms }')
    define(`rwx_file_perms', `{ rw_file_perms x_file_perms }')
    define(`create_file_perms', `{ create rename setattr unlink rw_file_perms }')

使用方式是：
    allow demo demo_device:chr_file rw_file_perms;



##################################################################################
2. android中SELINUX规则分析和语法简介.txt
##################################################################################
在android里面，SELinux针对的对象，有两个类型，一种是对文件，一种是对进程。

   ps -Z 可以查看[进程]所拥有的selinux的权限;
   ls -Z 可以查看[File]所拥有的selinux的权限;

--------------------------------------------------------------
ps -Z 举例：
--------------------------------------------------------------
	 LABEL                         USER     PID   PPID  NAME

	u:r:init:s0                    root      1     0     /init
	u:r:kernel:s0                  root      2     0     kthreadd
	...
	u:r:kernel:s0                  root      258   2     irq/322-HPH_R O
	u:r:logd:s0                    logd      259   1     /system/bin/logd
	u:r:healthd:s0                 root      260   1     /sbin/healthd
	u:r:lmkd:s0                    root      261   1     /system/bin/lmkd
	u:r:servicemanager:s0          system    262   1     /system/bin/servicemanager
	u:r:tee:s0                     system    271   1     /system/bin/qseecomd
	u:r:kernel:s0                  root      280   2     kworker/3:1H
	u:r:kernel:s0                  root      290   2     kauditd
	u:r:rmt_storage:s0             nobody    291   1     /system/bin/rmt_storage
	u:r:vold:s0                    root      263   1     /system/bin/vold
	u:r:surfaceflinger:s0          system    264   1     /system/bin/surfaceflinger
	u:r:tctd:s0                    root      265   1     /system/bin/tctd
	u:r:rfs_access:s0              system    268   1     /system/bin/rfs_access
	u:r:shell:s0                   shell     292   1     /system/bin/sh
	u:r:netd:s0                    root      295   1     /system/bin/netd
	u:r:debuggerd:s0               root      296   1     /system/bin/debuggerd


LABEL处的说明:

	1)第一个，Android中只定义了一个user,即为 u;

	2)第二个，如果是进程的话，都会统一定义为 r; 
		  如果是文件的话，会被定义为 object_r;

	3)第三个, 是这个进程的type;  //按照目前我的理解，这个是进程所属的domain类型。在andorid里面，定义了100多个type.

	4)第四个是s0，这个是一个安全的等级。

--------------------------------------------------------------
ls -Z 举例：
--------------------------------------------------------------
	drwxr-xr-x root     root              u:object_r:system_file:s0 system
	drwxrwxr-x system   tctpersist        u:object_r:tct_persist_file:s0 tctpersist
	lrwxrwxrwx root     root              u:object_r:rootfs:s0 tombstones -> /data/tombstones
	drwxr-x--x root     sdcard_r          u:object_r:rootfs:s0 storage
	drwx--x--x root     root              u:object_r:tmpfs:s0 synthesis
	dr-xr-xr-x root     root              u:object_r:sysfs:s0 sys
	-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.qcom.rc
	-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.rc

说明:
	object_r是代表的文件;
	u是android的唯一的用户;
	rootfs是这个文件所对应的(Domain?)类型;
	s0是一个安全的等级限制。



--------------------------------------------------------------------------------------
3. 如何配置selinux
--------------------------------------------------------------------------------------
   首先，按照Google的官方文档：
   需要linux内核首先是支持selinux的，另外需要android的selinux的配置文件，也就是extern/sepolicy里面的内容。
   然后就是修改BoardConfig.mk
   Google的nexus的sepolicy的支持就放在了device/lge/mako/sepolicy
   首先会包含厂商定制的sepolicy的文件夹：BOARD_SEPOLICY_DIRS
   然后将规则添加到了sepolicy中：BOARD_SEPOLICY_DIRS

  这样的话，我们编译出来的image其实就是具有了selinux的功能。
  其实如果没有厂商定制的话，也是会编译到external/sepolicy的，这样的话，就是使用andriod所有默认的sepolicy（It defines the domains and types for the AOSP services and apps common to all devices. ）

    然后理解了这个之后，我们可以看到其实很多的厂商也是有自己的配置规则在device/***/***/sepolicy下面的.

--------------------------------------------------------------------------------------
4. selinux的配置规则：
--------------------------------------------------------------------------------------
   首先要了解sepolicy的结构：
   a. App进程 -> mac_permissions.xml
   b. App数据文件 -> seapp_contexts
   c. 系统文件  ->  file_contexts
   d. 系统属性 -> property_contexts

   在te文件中，我们一般遇到的语法是这样的：
   rule_name source_type target_type:class perm_set
   解读为： 为source_type设置一个rule_name的规则，规则是对target_type的class 进行 perm_set的操作。

   然后是一些特殊的配置文件：
   a. external/sepolicy/attributes -> 所有定义的attributes都在这个文件
   b. external/sepolicy/access_vectors -> 对应了每一个class可以被允许执行的命令
   c. external/sepolicy/roles  -> Android中只定义了一个role，名字就是r，将r和attribute domain关联起来
   d. external/sepolicy/users  -> 其实是将user与roles进行了关联，设置了user的安全级别，s0为最低级是默认的级别，mls_systemHigh是最高的级别
   e. external/sepolicy/security_classes -> 指的是上文命令中的class，个人认为这个class的内容是指在android运行过程中，程序或者系统可能用到的操作的模块
   f. external/sepolicy/te_macros -> 系统定义的宏全在te_macros文件
   g. external/sepolicy/***.te  -> 一些配置的文件，包含了各种运行的规则

--------------------------------------------------------------------------------------
   另外，selinux有两种工作模式：
--------------------------------------------------------------------------------------
    “permissive”：所有操作都被允许（即没有MAC），但是如果有违反权限的话，会记录日志
    “enforcing”：所有操作都会进行权限检查

--------------------------------------------------------------------------------------
   最后，type的命令如下：
--------------------------------------------------------------------------------------
   type type_id [alias alias_id,] [attribute_id]   # 将type_id（别名为alias）关联到attribute. 这样的话，方便用attribute来管理不同的type中包含相同的属性的部分。

--------------------------------------------------------------------------------------
   class命令的格式为：
--------------------------------------------------------------------------------------
   class class_name [ inherits common_name ] { permission_name ... }
   inherits表示继承了common定义的权限，然后自己额外实现了permission_name的权限


--------------------------------------------------------------------------------------
   在.te文件中常见的四种命名的规则：
--------------------------------------------------------------------------------------
   allow：赋予某项权限。
   allowaudit：audit含义就是记录某项操作。默认情况下是SELinux只记录那些权限检查失败的操作。
		allowaudit则使得权限检查成功的操作也被记录。
		注意，allowaudit只是允许记录，它和赋予权限没关系。
		赋予权限必须且只能使用allow语句。
   dontaudit：对那些权限检查失败的操作不做记录。
   neverallow：前面讲过，用来检查安全策略文件中是否有违反该项规则的allow语句。如例子5所示：




-----------------------------------------------------------------------------------------------------
举例：
-----------------------------------------------------------------------------------------------------
type init, domain; 					//将init关联到domain，即将domain设置为init类型的属性
allow init unlabeled:filesystem mount; 			//允许init类型对unlabeled类型的filesystem进行mount的操作
allow init fotad:unix_stream_socket { bind create }; 	//允许init类型对fotad类型的unix_stream_socket 进行bind和create的操作

allow appdomain anr_data_file:dir search; 		//appdomain是定义在te_macros里面的一个宏，很多的app规则,会使用类似app_domain(shell)的命令将其添加进去
allow appdomain anr_data_file:file { open append }; 	
   
	意思是：
	1. 允许app去对anr_data_file类型的目录进行查找的操作
	2. 允许app对anr_data_file类型的file进行打开和添加操作   其实就是规定了出现anr时候，app往/data/anr/里面写入的权限限制

neverallow { appdomain -unconfineddomain } kmem_device:chr_file { read write }; 	//绝对不允许app(除了有unconfineddomain属性的app)对kmem_device类型的字符设备进行读写的操作
neverallow { appdomain -unconfineddomain } self:capability2 *; 				//绝对不允许除了unconfineddomain以外的app对self类型的capability2进行任何的操作

type httpd_user_content_t, file_type, httpdcontent; 		//声明一个httpd_user_content_t的类型，具有file_type和httpdcontent的属性

type httpd_user_content_t; 					//声明一个httpd_user_content_t的类型
typeattribute httpd_user_content_t file_type, httpdcontent;     //定义httpd_user_content_t具有file_type, httpdcontent的属性

allow appdomain self:rawip_socket create_socket_perms;



所有可以设置类型的地方, 其实都可以设置为属性: 
	比如我们允许所有具有app属性的内容可以去对self属性的rawip_socket进行create的操作

allow {user_t domain} {bin_t file_type sbin_t}:file execute ; 	//允许user_t和domain属性的类对bin_t, file_type, sbin_t类型的file进行可执行的操作

allow user_t user_t:process signal;
allow user_t self:process signal;

   //这两条语句的表述其实是一致的，其实self指的是目标的类型和发起人的类型是一致的, 所以不能声明一个类型或者属性叫做self

allow user_t bin_t:file ~{ write setattr ioctl }; 	//允许user_t对bin_t类型的file进行除了write setattr ioctl相关的操作

type_transition system wifi_data_file:sock_file system_wpa_socket;

   //当一个类型为system的类别去进行wifi_data_file类型的sock_file访问时，类型默认切换到system_wpa_socket

type_transition init_t apache_exec_t:process apache_t; //这条语句想要执行成功, 至少首先声明下面的三条规则：
allow init_t apache_exec_t:file execute;
allow init_t apache_t:process transition;
allow apache_t apache_exec_t:file entrypoint;

   //type_transition 和 type_change 的语法规则是一样的， type_change规则的影响不会在内核中生效，而是依赖于用户空间应用程序，如login或sshd



-----------------------------------------------------------------------------------------------------
5. 生成方法：
-----------------------------------------------------------------------------------------------------
下面介绍一下最简单的安全策略（se-policy）添加方法，各组碰到SELinux导致的访问禁止问题，可以参考用这种方法确认和解决。

1) 安装pc上的工具，用于自动生成安全策略

	$ sudo apt-get install policycoreutils

2) 刷userdebug/eng软件，先将SELinux设置成Permissive模式，只输出警告不阻止操作
   
        使用getenforce命令查看当前模式：$ adb shell getenforce
	Enforcing

	在Enforcing模式下，除安全策略允许外的操作都会被阻止；使用setenforce命令更改当前模式（root权限需要）：

	$ adb root
	restarting adbd as root
	$ adb shell setenforce 0
	$ adb shell getenforce
	Permissive

	开发如果碰到怀疑是SELinux 可以通过这种方法关闭SELiunx( setenforce 0)，以确认是不是SELinux引起的

3)，按照流程完成整个操作，抓取log，过滤出警告信息

	$ grep "avc: *denied" log.txt > denied.txt
	$ cat denied.txt

4)，使用pc工具生成安全策略

	命令 audit2allow 用来一次性生成所有安全策略，输入为前面抓取的log
	$ audit2allow -i denied.txt

