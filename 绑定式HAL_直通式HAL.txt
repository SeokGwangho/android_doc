----------------------------------------------------------------------------------------------------------------------------
1
----------------------------------------------------------------------------------------------------------------------------
HIDL 学习
官方介绍: https://source.android.com/devices/architecture/hidl/

Google Android从O开始添加了HIDL，用来解决厂商不能快速跟进新版本升级的问题，官方说法：
The goal of HIDL is that the framework can be replaced without having to rebuild HALs

整体理解了一下，HIDL实现方式类似AIDL:

AIDL是解决APP和Framework之间的通信;
HIDL是解决Framework和HAL之间的通信;

前者向上，后者向下。因此Google把从kernel、HAL到FW重新添加了另一套binder业务，很多代码看起来都是似曾相识，比如Bp，B，Proxy之类的。

关键概念:
HIDL为了适配原来版本的HAL，所以分为了两种类型:

绑定式HAL(Binderized):
用HIDL语言定义接口，取代了传统HAL实现，在此模式下，Android 框架和HAL之间通过binder通信，在后续的版本中的硬件只支持此模式。

直通式HAL(Passthrough):
用HIDL封装了传统HAL，同时支持绑定和直通模式

----------------------------------------------------------------------------------------------------------------------------
2
----------------------------------------------------------------------------------------------------------------------------
HAL类型:
  绑定式HAL
  直通式HAL

为了更好地实现模块化，Android 8.0 对 Android 操作系统底层进行了重新架构。作为此变化的一部分，
运行 Android 8.0 的设备, 必须支持[绑定式HAL]或[直通式HAL].
---------------------------------------------------------------------
绑定式HAL:
---------------------------------------------------------------------
以 HAL 接口定义语言 (HIDL) 表示的 HAL。这些 HAL 取代了早期 Android 版本中使用的传统 HAL 和旧版 HAL。
在绑定式 HAL 中，Android 框架和 HAL 之间通过 Binder 进程间通信 (IPC) 调用进行通信。
所有在推出时即搭载了 Android 8.0 或后续版本的设备都必须只支持绑定式 HAL。
---------------------------------------------------------------------
直通式HAL:
---------------------------------------------------------------------
以 HIDL 封装的传统 HAL 或旧版 HAL。这些 HAL 封装了现有的 HAL，可在绑定模式和 Same-Process（直通）模式下使用。
升级到 Android 8.0 的设备可以使用直通式 HAL。

---------------------------------------------------------------------
HAL 模式要求:
---------------------------------------------------------------------
设备	直通式	绑定式
搭载 Android 8.0 的设备	直通式 HAL 中列出的 HAL 必须为直通式。所有其他 HAL 均为绑定式（包括作为供应商扩展程序的 HAL）。
升级到 Android 8.0 的设备	直通式 HAL 中列出的 HAL 必须为直通式。绑定式 HAL 中列出的 HAL 必须为绑定式。

供应商映像提供的所有其他 HAL 既可以在直通模式下使用，也可以在绑定模式下使用。	


---------------------------------------------------------------------
绑定式 HAL:
Android 要求所有 Android 设备（无论是搭载 Android O 的设备还是升级到 Android O 的设备）上的下列 HAL 均为绑定式：

android.hardware.biometrics.fingerprint@2.1。取代 Android 8.0 中已不存在的 fingerprintd。
android.hardware.configstore@1.0。Android 8.0 中的新 HAL。
android.hardware.dumpstate@1.0。此 HAL 提供的原始接口可能无法继续使用，并且已更改。因此，dumpstate_board 必须在指定的设备上重新实现（这是一个可选的 HAL）。
android.hardware.graphics.allocator@2.0。在 Android 8.0 中，此 HAL 必须为绑定式，因此无需在可信进程和不可信进程之间分享文件描述符。
android.hardware.radio@1.0。取代由存活于自身进程中的 rild 提供的接口。
android.hardware.usb@1.0。Android 8.0 中的新 HAL。
android.hardware.wifi@1.0。Android 8.0 中的新 HAL，可取代此前加载到 system_server 的旧版 WLAN HAL 库。
android.hardware.wifi.supplicant@1.0。在现有 wpa_supplicant 进程之上的 HIDL 接口

注意：Android 提供的以下 HIDL 接口,将一律在绑定模式下使用：
android.frameworks.、
android.system. 和 
android.hidl.*
（不包括下文所述的 android.hidl.memory@1.0）。

---------------------------------------------------------------------
直通式 HAL:
Android 要求所有 Android 设备（无论是搭载 Android O 的设备还是升级到 Android O 的设备）上的下列 HAL 均在直通模式下使用：

android.hardware.graphics.mapper@1.0。将内存映射到其所属的进程中。
android.hardware.renderscript@1.0。在同一进程中传递项（等同于 openGL）。
上方未列出的所有 HAL 在搭载 Android O 的设备上都必须为绑定式。

Same-Process HAL: 
Same-Process HAL (SP-HAL) 一律在使用它们的进程中打开，其中包括未以 HIDL 表示的所有 HAL，以及那些非绑定式的 HAL。
SP-HAL 集的成员只能由 Google 控制，这一点没有例外。

SP-HAL 包括以下 HAL：
openGL
Vulkan
android.hidl.memory@1.0（由 Android 系统提供，一律为直通式）
android.hardware.graphics.mapper@1.0。
android.hardware.renderscript@1.0
---------------------------------------------------------------------
传统 HAL 和旧版 HAL:
传统 HAL（在 Android 8.0 中已弃用）是指与具有特定名称及版本号的应用二进制接口 (ABI) 标准相符的接口。
大部分 Android 系统接口（相机、音频和传感器等）都采用传统 HAL 形式（已在 hardware/libhardware/include/hardware 下进行定义）。

旧版 HAL（也已在 Android 8.0 中弃用）是指早于传统 HAL 的接口。
一些重要的子系统（WLAN、无线接口层和蓝牙）采用的就是旧版 HAL。
虽然没有统一或标准化的方式来指明是否为旧版 HAL，但如果 HAL 早于 Android 8.0 而出现，那么这种 HAL 如果不是传统 HAL，就是旧版 HAL。
有些旧版 HAL 的一部分包含在 libhardware_legacy 中，而其他部分则分散在整个代码库中。
